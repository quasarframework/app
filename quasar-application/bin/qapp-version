#!/usr/bin/env node

// cli deps
const
  parseArgs = require('minimist'),
  path = require('path'),
  chalk = require('chalk')

const
  log = require('../lib/helpers/logger')('app:version')
  appPaths = require('../lib/build/app-paths')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help'
  },
  boolean: ['h']
})

if (argv.help) {
  console.log(`
    Description
      Displays information about your Quasar App.
    Usage
      $ quasar version
  `)
  process.exit(0)
}

const os = require('os')
const exec = require("child_process").execSync
const chalkRed = chalk.red
const chalkGreen = chalk.green
const versions = [
  { key: 'Operating System', value: chalkGreen(`${os.type()}(${os.release()}) - ${os.platform()}/${os.arch()}`), section: true },
  { key: 'Networking', value: chalkGreen(os.hostname()), section: true }
]
const interfaces = os.networkInterfaces()

const safeExec = (command) => {
  try {
    return chalkGreen(String(exec(command)).trim())
  } catch (err) {
    return chalkRed('Not available')
  }
}
const safePkgInfo = (pkg) => {
  try {
    const content = require(appPaths.resolve.app(`node_modules/${pkg}/package.json`))
    return {
      key: `  ${String(content.name).trim()}`,
      value: `${chalkGreen(String(content.version).trim())}${content.description ? `\t(${content.description})` : ''}`
    }
  } catch (err) {
    return {
      key: `  ${pkg}`,
      value: chalkRed('Not available')
    }
  }
}

Object.keys(interfaces).forEach((ifname) => {
  versions.push({ key: `  ${ ifname }` })
  interfaces[ifname].sort((a, b) => a.family > b.family ? 1 : -1)
    .forEach((interface) => versions.push({
      key: `    ${ interface.family }`,
      value: interface.internal ? interface.address : chalkGreen(interface.address)
    }))
})
versions.push({ key: 'NodeJs', value: chalkGreen(String(process.version).slice(1).trim()), section: true })
versions.push({ key: 'NPM', value: safeExec('npm --version') })
versions.push({ key: 'Local packages', section: true })
const moduleList = [
  'quasar-application',
  'quasar-framework',
  'quasar-extras',
  'vue',
  'vue-router',
  'vuex',
  'vue-i18n',
  'vuelidate',
  'axios',
  'electron',
  'cordova',
  'babel-core',
  'webpack',
]
moduleList.forEach((pkg) => versions.push(safePkgInfo(pkg)))

const spaces = versions.reduce((acc, v) => Math.max(acc, v.key.length), 0)
console.log(
  versions
    .map((m) => `${m.section ? '\n' : ''}${ m.key }${' '.repeat(spaces - m.key.length)}\t${ m.value === undefined ? '' : m.value }`).join('\n')
)
console.log()
