#!/usr/bin/env node

const
  parseArgs = require('minimist'),
  chalk = require('chalk')

const
  logger = require('../lib/helpers/logger'),
  log = logger('app:dev'),
  warn = logger('app:dev', 'red'),
  appPaths = require('../lib/build/app-paths')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    t: 'theme',
    m: 'mode',
    T: 'target',
    P: 'params',
    p: 'port',
    H: 'hostname',
    h: 'help'
  },
  boolean: ['h'],
  string: ['t', 'm', 'T', 'P', 'H'],
  default: {
    t: 'mat',
    m: 'spa',
    p: process.env.PORT || 8080,
    H: 'localhost'
  }
})

if (argv.help) {
  console.log(`
    Description
      Starts the app in development mode (hot-code reloading, error
      reporting, etc)
    Usage
      $ quasar dev -p <port number>
    Options
      --theme, -t      App theme (default: mat)
      --mode, -m       App mode [spa|pwa|cordova|electron] (default: spa)
      --port, -p       A port number on which to start the application
      --hostname, -H   A hostname to use for serving the application
      --help, -h       Displays this message

      Only for Cordova mode (required):
      --target, -T     App target
                         [android|ios|blackberry10|browser|osx|ubuntu|webos|windows]
      --params, -P     Extra parameters to be passed to cordova
                         ['--target="iPhone8"']
  `)
  process.exit(0)
}

require('../lib/helpers/ensure-argv')(argv, 'dev')

log(`Running: Mode [ ${chalk.red(argv.mode.toUpperCase())} ] with [ ${chalk.red(argv.theme.toUpperCase())} ] theme`)
log()

if (argv.mode !== 'spa') {
  require('../lib/mode/install-missing')(argv.mode, argv.target)
}

async function goLive () {
  const
    DevServer = require('../lib/dev-server'),
    QuasarConfig = require('../lib/quasar-config'),
    Generator = require('../lib/generator'),
    findPort = require('../lib/helpers/net').findClosestOpenPort

  if (argv.mode === 'cordova' && ['localhost', '127.0.0.1', '::1'].includes(argv.hostname.toLowerCase())) {
    const getExternalIP = require('../lib/helpers/get-external-ip')
    argv.hostname = await getExternalIP()
  }

  const openPort = await findPort(argv.port, argv.hostname)
  if (argv.port !== openPort) {
    warn()
    warn(`Setting port to closest one available: ${openPort}`)
    warn()

    argv.port = openPort
  }

  const
    quasarConfig = new QuasarConfig({
      theme: argv.theme,
      mode: argv.mode,
      target: argv.target,
      port: argv.port,
      host: argv.hostname,
      dev: true,
      onBuildChange () {
        log(`Build changes detected. Rebuilding app...`)
        dev = dev.then(startDev)
      },
      onAppChange () {
        log(`App changes detected. Updating app...`)
        generator.build()
      }
    }),
    generator = new Generator(quasarConfig),
    Cordova = argv.mode === 'cordova' ? require('../lib/cordova') : false,
    Electron = argv.mode === 'electron' ? require('../lib/electron') : false

  function startDev (oldDevServer) {
    let devServer

    return Promise.resolve()
      .then(() => devServer = new DevServer(quasarConfig))
      .then(() => oldDevServer ? oldDevServer.stop() : Promise.resolve())
      .then(() => generator.build()) // Update generated files
      .then(() => devServer.listen()) // Start listening
      .then(() => Electron ? Electron.run(quasarConfig) : Promise.resolve())
      .then(() => Cordova ? Cordova.run(quasarConfig) : Promise.resolve())
      .then(() => devServer) // Pass new builder to watch chain
  }

  let dev = startDev()
}

goLive()
